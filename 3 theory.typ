= 理论基础 <theory>

要理解幽灵变量式规约与存在量词式规约之间的对应关系，需要从两者在生成验证条件并完成形式化证明时所使用的逻辑规则着手。
具体而言，这里关键的有三条证明规则(如下图所示）：分离逻辑中的 hexists-elim（涉及蕴含符号左侧的存在量词）、一阶逻辑中的 forall-intro（处理hexists-elim带来的全称量词）以及 hexists-intro（涉及蕴含符号右侧的存在量词）。下面使用后向证明（规则中的从“下”而“上”）的证明方向，消除量词式断言中所有的 ∃ ，从而揭露出与幽灵变量式相同的无量词形式。

#figure(
  image("images/hexists-rules.png", width: 100%),
  caption: "存在量词相关的几个证明规则"
)

我们试图用后向证明（即上面的规则中，从下面推导到上面的方向）的方式，应用这些条规则，将上述存在量词式规约的蕴含式中的存在量词$exists$ 全部消除掉。

首先考虑原始的分离逻辑蕴含式，其中前置条件和后置条件均带有存在量词。我们先用 hexists-elim 消除前置条件中的 $∃$：。

$forall x. ((p mapsto x + 15) ∗ "pure"(x < 100) 
⊢
exists y. (p mapsto y) ∗ "pure"(y < 115))
$

随后，应用 forall-intro 去掉对整个蕴含式的全称量化，使蕴含式变为无量词形式：

$(p mapsto x + 15) ∗ "pure"(x < 100) 
⊢
exists y. (p mapsto y) ∗ "pure"(y < 115)
$

最后，通过 hexists-intro 并选取合适的见证（即设 $y = x+15$），去除后置条件中的 $∃$，使蕴含式完全消除所有量词，仅剩普通的算术与命题断言：

$(p mapsto x + 15) ∗ "pure"(x < 100) 
⊢
(p mapsto x + 15) ∗ "pure"(x + 15 < 115)
$

我们注意到，应用完了三条规则以后，存在量词式的蕴含式，化简为了幽灵变量式规约得到了和相同的结果（或者更准确地说，$alpha$-等价的形式）。并且，幽灵变量版程序中那条额外的幽灵赋值语句 v := v + 15 恰好对应于我们在 hexists-intro 中提供的见证 y = x + 15——它确保在执行后变量 v 拥有满足后置条件的正确值。由此，我们可以给出一个幽灵变量式规约和存在量词式规约之间的关联：
1. 在语法层面，存在量词式断言正是对幽灵变量式断言的所有幽灵变量加上存在量词的形式；

2. 在证明过程层面，幽灵变量式的证明等价于对该存在量词式断言依次应用 hexists-elim、forall-intro 和 hexists-intro 三条规则后得到的结果。

更一般地，如果涉及多个幽灵变量或多重存在量词，只需重复应用上述规则，仍可完整还原两种规约方式之间的关联。

基于上述对应关系，我们可以构造一个将幽灵变量式规约及其验证自动转换为存在量词式规约和验证的简化流程，具体三步：

1. 对所有断言中的幽灵变量统一添加存在量词，将其转化为存在量词式；

2. 对于幽灵变量，根据幽灵变量的赋值语句，维护其相应的符号状态，提取相应的存在见证。

3. 在证明的环节，应用三条规则，消除分离逻辑蕴含式中的存在量词，使其化简到和幽灵变量式完全相同的形式。

这一转换方案已在 C-Star 中得到实现，具体细节将在下一章中详细介绍。