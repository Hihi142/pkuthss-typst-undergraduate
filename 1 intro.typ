= 引言 <intro>

在信息化的时代，软件已融入我们生活的方方面面。软件在显著提升生产力的同时，也频繁因安全漏洞而引发严重的社会与经济损失，甚至造成人员伤亡。
为此，人们尝试了多种手段来加强软件的安全性。其中，*形式化验证*（formal verification）利用逻辑的方法，证明程序严格符合预期的规约，从而保障其安全性。20世纪60年代，Floyd、 Hoare就提出了霍尔逻辑（Hoare Logic）@HoareLogic，奠定了程序形式化验证的理论基础；但由于相关基础设施建设极其困难，直到近二十年内形式化验证才逐步投入实际应用。目前，形式化验证已经在操作系统 @chajed2022daisynfs, @SEL4、编译器 @leroy2016compcert、密码学协议 @woos2016raft 等高安全需求领域得到应用。

然而，形式化验证的成本非常高昂。以首个经过形式化验证的操作系统内核 seL4 @SEL4 为例，开发内核耗费了 2.2 人年，而验证其正确性则耗费了近 20 人年。进入2010年代后，随着 Rocq（即改名后的 Coq）@rocq2025、VST @VST-FLOYD、Dafny @leino2006dafny 等工具的诞生、发展以及丰富的在线教程出现，形式化验证的基础设施和用户社区有了长足发展，但应用范围仍局限于关键系统软件，尚未在更广泛的软件领域普及。

这种高昂成本由多方面原因造成，其中之一是认知负担（cognitive burden）：形式化验证所需的数学和逻辑技巧对普通程序员而言难以掌握，导致验证工作往往由专门的验证专家承担，严重拖慢了带验证的软件开发进度。为此，不少研究致力于通过精巧设计与自动化手段，让普通程序员也能参与到形式化验证中。例如， @krogmeier2022synthesizing 这一工作设计了一种自动化“合成”程序验证中公理体系，从而减少程序证明过程中对于验证专家的依赖； @murali2024predictable 这一工作通过巧妙地设计程序规约所能使用的语言以及用户书写证明的方式，使得规约的验证总是可判定的（即，总是会报告成功或者给出反例），从而降低了程序员使用验证工具的门槛。

这篇论文也采取这一视角，聚焦于分离逻辑的程序规约中经常含有的不直观存在量词，提出一种利用幽灵变量消除这些存在量词的方法。利用这一方法在，我在Cstar框架（一个逻辑基础中，不含幽灵变量的验证工具） 实现了一个幽灵变量的扩展。该扩展能够将含幽灵变量的规约与证明，转换为利用存在量词书写的“等价”规约与证明，既提高了工具的易用性，也实证了两类规约之间的的对应关系。

章节导引：第@background 章回顾必要的背景知识，并介绍不直观exists产生的原因；第@theory 章通过几条涉及存在量词的形式化规则，讨论幽灵变量的规约与包含存在量词规约之间的联系；第@impl 章展示幽灵变量扩展的具体实现；第@discussion 章讨论相关工作；第六章做出总结。